#+TITLE: 09 - Materials
#+SETUPFILE: ./publish.setup
#+PROPERTY: header-args :exports code :tangle no

[[./index.org][Documentation index]]

* Creation

  #+NAME: materials_create_test
  #+BEGIN_SRC clojure
  (testing "The default material"
    (let [m default-material]
      (is (= c/white
             (:color m)))
      (is (= 0.1
             (:ambient m)))
      (is (= 0.9
             (:diffuse m)))
      (is (= 0.9
             (:specular m)))
      (is (= 200
             (:shininess m)))))
  #+END_SRC

  #+NAME: materials_create
  #+BEGIN_SRC clojure
  (def default-material
    {:color c/white
     :ambient 0.1
     :diffuse 0.9
     :reflective 0.
     :refractive-index 1.
     :specular 0.9
     :shininess 200
     :transparency 0.})

  (def glass
    (assoc default-material
           :transparency 1.
           :refractive-index 1.5))
  #+END_SRC

* Lighting

  The Phong reflection model:
  - Ambient reflection is background lighting.
  - Diffuse reflection is light reflected from a matte surface.
  - Specular reflection is the reflection of the light source itself.

  Lighting take into account shadow thanks to an extra parameter =in-shadow=.

  When a point is in the shadow of a light source, only the ambient component is used for lighting.

  #+NAME: materials_lighting_test
  #+BEGIN_SRC clojure
  (let [m default-material
        position (t/point 0. 0. 0.)
        pi-4 (/ (Math/sqrt 2) 2)]
    (testing "Lighting with the eye between the light and the surface"
      (let [eyev (t/vector 0. 0. -1.)
            normalv (t/vector 0. 0. -1.)
            light (l/point-light (t/point 0. 0. -10.) (c/color 1. 1. 1.))]
        (is (t/eq? (c/color 1.9 1.9 1.9)
                   (lighting m (s/sphere) light position eyev normalv)))))

    (testing "Lighting with the eye between light and surface, eye offset 45°"
      (let [eyev (t/vector 0. pi-4 (- 0 pi-4))
            normalv (t/vector 0. 0. -1.)
            light (l/point-light (t/point 0. 0. -10.) (c/color 1. 1. 1.))]
        (is (t/eq? (c/color 1. 1. 1.)
                   (lighting m (s/sphere) light position eyev normalv)))))

    (testing "Lighting with eye opposite surface, light offset 45°"
      (let [eyev (t/vector 0. 0. -1.)
            normalv (t/vector 0. 0. -1.)
            light (l/point-light (t/point 0. 10. -10.) (c/color 1. 1. 1.))]
        (is (t/eq? (c/color 0.7364 0.7364 0.7364)
                   (lighting m (s/sphere) light position eyev normalv)))))

    (testing "Lighting with eye in the path of the reflection vector"
      (let [eyev (t/vector 0. (- 0 pi-4) (- 0 pi-4))
            normalv (t/vector 0. 0. -1.)
            light (l/point-light (t/point 0. 10. -10.) (c/color 1. 1. 1.))]
        (is (t/eq? (c/color 1.6364 1.6364 1.6364)
                   (lighting m (s/sphere) light position eyev normalv)))))

    (testing "Lighting with the light behind the surface"
      (let [eyev (t/vector 0. 0. -1.)
            normalv (t/vector 0. 0. -1.)
            light (l/point-light (t/point 0. 0. 10.) (c/color 1. 1. 1.))]
        (is (t/eq? (c/color 0.1 0.1 0.1)
                   (lighting m (s/sphere) light position eyev normalv)))))

    (testing "Lighting with the surface in shadow"
    (let [eyev (t/vector 0. 0. -1.)
          normalv (t/vector 0. 0. -1.)
          light (l/point-light (t/point 0. 0. -10.) (c/color 1. 1. 1.))]
      (is (= (c/color 0.1 0.1 0.1)
             (lighting m (s/sphere) light position eyev normalv :in-shadow))))))
  #+END_SRC

  Materials can be given patterns which replace color.

  #+NAME: materials_pattern_test
  #+BEGIN_SRC clojure
  (testing "Lighting with a pattern applied"
    (let [mat (-> default-material
                  (assoc :pattern (pt/stripes c/white c/black)
                         :ambient 1.
                         :diffuse 0.
                         :specular 0.))
          eyev (t/vector 0. 0. -1.)
          normalv (t/vector 0. 0. -1.)
          light (l/point-light (t/point 0. 0. -10.) (c/color 1. 1. 1.))]
      (is (= c/white
             (lighting mat (s/sphere) light (t/point 0.9 0. 0.) eyev normalv false)))
      (is (= c/black
             (lighting mat (s/sphere) light (t/point 1.1 0. 0.) eyev normalv false)))))
  #+END_SRC

  #+NAME: materials_lighting
  #+BEGIN_SRC clojure
  (defn lighting
    ([{:keys [color pattern ambient diffuse shininess specular]}
      object light position eyev normalv in-shadow?]
     (let [color (if pattern (pt/pattern-at-shape pattern object position) color)
           effective-color (c/dot color (:intensity light))
           ambient (c/mul effective-color ambient)]
       (if in-shadow?
         ambient
         (let [lightv (t/norm (t/sub (:position light) position))
               light-dot-normal (t/dot lightv normalv)
               inside? (> 0 light-dot-normal)]
           (if inside?
             ambient
             (let [diffuse (c/mul effective-color (* diffuse light-dot-normal))
                   reflectv (t/reflect (t/sub t/zerov lightv) normalv)
                   reflect-dot-eyev' (t/dot reflectv eyev)
                   reflect-dot-eyev (Math/pow reflect-dot-eyev' shininess)
                   amb-dif (c/add ambient diffuse)
                   specular? (< 0 reflect-dot-eyev)]
               (if-not specular?
                 amb-dif
                 (let [specular (c/mul (:intensity light) (* reflect-dot-eyev specular))]
                   (c/add amb-dif specular)))))))))
    ([material object light position eyev normalv]
     (lighting material object light position eyev normalv nil)))
  #+END_SRC

* Files                                                           :noexport:
   :PROPERTIES:
   :header-args: :exports none :noweb yes
   :END:

  #+BEGIN_SRC clojure :tangle ../src/rt_clj/materials.clj
  (ns rt-clj.materials
    (:require [rt-clj.colors :as c]
              [rt-clj.patterns :as pt]
              [rt-clj.tuples :as t]))


  <<materials_create>>

  <<materials_lighting>>
  #+END_SRC

  #+BEGIN_SRC clojure :tangle ../test/rt_clj/materials_test.clj
  (ns rt-clj.materials-test
    (:import java.lang.Math)
    (:require [clojure.test :refer :all]
              [rt-clj.materials :refer :all]
              [rt-clj.colors :as c]
              [rt-clj.lights :as l]
              [rt-clj.patterns :as pt]
              [rt-clj.spheres :as s]
              [rt-clj.tuples :as t]))

  (deftest materials-test
    <<materials_create_test>>

    <<materials_lighting_test>>

    <<materials_pattern_test>>)
  #+END_SRC

* Example

  Let's draw a sphere, in =[0. 0. 0.]=, scaled by a factor =0.5= in the =z= direction.

  The rays origin is in =[3. 0. 0.]= and the projection screen is the plane =[-3. y z]=.

  A light source is behind the eye to the upper right at =[10. 10. -10.]=

  The sphere is purple and we will use our material lighting.

  [[file:../samples/sphere_light_example.png]]
